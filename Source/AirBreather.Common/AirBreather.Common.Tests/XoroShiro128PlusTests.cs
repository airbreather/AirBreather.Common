using System;
using System.Runtime.InteropServices;

using AirBreather.Random;

using Xunit;

namespace AirBreather.Tests
{
    public sealed class XoroShiro128PlusTests
    {
        // from https://ideone.com/PuauK5, which our clojure and scala cousins also use
        public static object[][] SimpleSequenceData { get; } =
        {
            new object[] { 7466763236896258944, -1564294205728215327, new long[] { 5902469031168043617, 7198773297087363760, 6511019481306438310, 6805937670766273472, 7422288258887783584, -4110081440968305496, 3320553885932104876, 9004323854900464289, -8063466066358415725, 6934613490556277802, -8696937840573800867, 4825238703135643023, -1653493201001060868, 42260303558577377, -4626014675938634426, -944508197994376332, -6366473392214075266, 3950621334431780796, 6787423372391118498, 611197869042383294 } },
            new object[] { -4112066845936433283, 3163302063874436343, new long[] { -948764782061996940, -7821776231016794550, -7030552912602174385, 8958716425930328502, -354922957426629560, 859132303837298162, -5334998035091375266, -2800784435775762996, 7353695532251559551, 2814371675410550454, 7343007739229141345, -8944151890871223344, 5930305798524816002, -4163782670270808330, 5979807316683484099, -7092339377833469817, -4661317528092520811, 7796919036230843598, -624412798709654714, -2467985928541876216 } },
            new object[] { -3556036892712017828, 4744313911787442952, new long[] { 1188277019075425124, -2031588697732539858, -8601851069438057733, -1783187797461758034, 3375484877072944896, 7462292442845328860, -3670405771325518947, 2021919734452842993, 1602781825889362786, 799454451685605819, -1909096564437143223, -1578291332004927205, 7027493770310518551, -5377717905298702031, 6623838181451763101, -4751789108151407327, 1449975645991318649, 1351175348912862183, -1115098130549484081, 4694343480567463234 } },
            new object[] { 4888108530473458491, 1080114599882612163, new long[] { 5968223130356070654, 6032985129407534403, 4534609269871591120, -1731260568486595776, 5758190196341762132, 6589264333898394748, 1097157270079905485, -4815640155108239881, -2785127221164809533, 5690309465150585478, -1655891647747823172, -2223483582408611975, -2333256348386901250, -2079169955617089199, 5860842200898697024, -4305100838382793359, 2205070721799922809, 2040800925900756689, 4216004939170149640, -741217424629009490 } },
            new object[] { 1509269885909564309, 7133068101378203014, new long[] { 8642337987287767323, 4292927883082007017, 467007447584346989, 2774909934043114559, -5933931602561221033, 1230699784193511151, 3172874214865991087, 5624032393155783, 8334028308889261817, 6847835692669780223, 1066185610557673137, -7713465035237903947, 1555430774008560978, 6049341261429709507, -3654928520531525839, -2830381161584601530, -1087629377749160679, 3005996437783538394, 4521566568763510045, -8592592243709414385 } },
        };

        [Theory]
        [MemberData(nameof(SimpleSequenceData))]
        public void SimpleSequenceTest(long s0, long s1, long[] signedExpected)
        {
            unchecked
            {
                var sut = new XoroShiro128PlusGenerator();
                RngState128 prngState = new RngState128((ulong)s0, (ulong)s1);
                ReadOnlySpan<ulong> expected = MemoryMarshal.Cast<long, ulong>(signedExpected);
                Span<ulong> actual = stackalloc ulong[expected.Length];

                // one-shot
                sut.FillBuffer(prngState, MemoryMarshal.AsBytes(actual));
                Assert.True(expected.SequenceEqual(actual));

                // one-by-one
                actual.Clear();
                for (int i = 0; i < actual.Length; i++)
                {
                    prngState = sut.FillBuffer(prngState, MemoryMarshal.AsBytes(actual.Slice(i, 1)));
                }

                Assert.True(expected.SequenceEqual(actual));
            }
        }

        // also from https://ideone.com/PuauK5
        public static object[][] JumpData { get; } =
        {
            new object[] { 990903846483086990, -9148032195894284410, new long[] { -202913253275002842, -3343919899937856555, 7815278568507025494, -7622830828298576044, 2861384012317217776 } },
            new object[] { -4009791646934021264, 2482945807292523774, new long[] { 6862507382354034559, 7011875142185683248, -4496564143832921207, 1853506959186203582, -8638081920607530712 } },
            new object[] { 8408836858555572576, -8576334934951868580, new long[] { -2331108112525860358, -7058988001537110731, -6592145494078489880, -1634515623999943417, 3097860178046766537 } },
            new object[] { 1865665657046312887, -2081931776983017860, new long[] { 6193425956360965668, -5684898831560071200, -2065913535431491189, 9075337997212788543, -5025025827370910366 } },
            new object[] { 4716662714674336978, -4755215357118135582, new long[] { 9063123224574765832, -8444699141156829399, -908412126696469887, 5890875775521162114, -3787313022067243265 } },
        };

        [Theory]
        [MemberData(nameof(JumpData))]
        public void JumpTest(long s0, long s1, long[] signedExpected)
        {
            unchecked
            {
                var sut = new XoroShiro128PlusGenerator();
                RngState128 prngState = new RngState128((ulong)s0, (ulong)s1);
                ReadOnlySpan<ulong> expected = MemoryMarshal.Cast<long, ulong>(signedExpected);

                Span<ulong> actual = stackalloc ulong[expected.Length];
                for (int i = 0; i < actual.Length; i++)
                {
                    prngState = XoroShiro128PlusGenerator.Jump(prngState);
                    prngState = sut.FillBuffer(prngState, MemoryMarshal.AsBytes(actual.Slice(i, 1)));
                }

                Assert.True(expected.SequenceEqual(actual));
            }
        }
    }
}
